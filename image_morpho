**Aim:** To apply image morphology on the given test image. 


from scipy.linalg import hadamard
from skimage.color import rgb2gray
from skimage import io
import numpy as np
import matplotlib.pyplot as plt
import cv2
from scipy.fftpack import dct
from scipy.fftpack import idct
import scipy 
from scipy import signal

image = io.imread('squares.tif')


plt.imshow(image, cmap='gray')

image.shape

[rows,cols]=image.shape
[rows,cols]

Applying thresholding

for r in range(rows):
  for c in range(cols):
    if image[r][c]> 100:
      image[r][c] = 255
    else:
      image [r][c] = 0

plt.imshow(image, cmap = 'gray')

Erosion of the image

image_erosion = image.copy()
sz = 11  #size of the structuring element
#sz = 3
#sz =21
se = 255 * np.ones([sz,sz]) #structuring element which is a square matrix of size 11x11

se

cent = int((sz -1)/2) #define the center of the structuring element, we make it an integer since 5.0th row does not exist
cent

#center of the structuring element will be a part of the eroded image if and only if their sizes are equal 

#for loop to erode the given image on the basis of certain criterion
for r in range (cent,rows):
  for c in range (cent,cols):
    temp = image [r-cent : r + cent +1,c - cent: c + cent +1]
    if np.array_equal (temp,se): #in-built function which checks if the two given matrices are of equal size or not
      image_erosion [r][c]= 255 # here, in the place of 255, we always substitute the size of the structuring element
    else:
      image_erosion [r][c]=0 # squares of size < 11 x 11 are removed/made black 

plt.figure(figsize=(8,8))
plt.subplot(1,2,1)
plt.title ("Original Image")
plt.imshow (image, cmap= 'gray')
plt.subplot(1,2,2)
plt.title("Eroded Image")
plt.imshow (image_erosion, cmap= 'gray')

**Conclusion:**
* The given test image was eroded by using square structuring element of size 11 x 11. 
* The eroded image shows all the squares which are equal to 11 x 11 or more than it. 
* If size of structuring element is increased to size 21 x 21, all squares disappear from the eroded image. This shows that in the given image the size of the largest square is less than 21x21.
* To retain the smallest square in the eroded image, we use a structuring element of size 3x3. 

**Dilation of the given image**

sz = 11
se = 255 * np.ones([sz,sz])

cent = int((sz -1)/2) #define the center of the structuring element, we make it an integer since 5.0th row does not exist
cent #dilation increases the number of rows and cols in the dilated image by the value we get in cent 

image_dilation = image.copy()

#for loop to dilate the given image on the basis of certain criterion
#in dilation. if even one point of the structuring element is same as the original image, it will be a part of the dilated image
for r in range (cent,rows):
  for c in range (cent,cols):
    temp = image [r-cent : r + cent +1,c - cent: c + cent +1]
    if np.isin (255, temp): #checks if the value of the structuring element lies between the range of 255 and temp
      image_dilation [r][c]= 255 # here, in the place of 255, we always substitute the size of the structuring element
    else:
      image_dilation [r][c]=0 # squares of size < 11 x 11 are removed/made black 

plt.figure(figsize=(9,9))
plt.subplot(1,3,1)
plt.title ("Original Image")
plt.imshow (image, cmap= 'gray')
plt.subplot(1,3,2)
plt.title("Eroded Image")
plt.imshow (image_erosion, cmap= 'gray')
plt.subplot(1,3,3)
plt.title("Dilated Image")
plt.imshow (image_dilation, cmap = 'gray')

**Conclusion:**
* The given test image was dilated with a white structuring image of size 11 x 11.
* Size of each square in dilated image increases by 5 rows and 5 cols on both sides. 
* Size of the square of the dilated image can be increased or reduced by increasing or reducing the size of the structuring element.

**Activity:** We dilate the already eroded image. 

image_erosion = image.copy()
sz = 11  #size of the structuring element
#sz = 3
#sz =21
se = 255 * np.ones([sz,sz]) #structuring element which is a square matrix of size 11x11

cent = int((sz -1)/2) #define the center of the structuring element, we make it an integer since 5.0th row does not exist
cent

#for loop to erode the given image on the basis of certain criterion
for r in range (cent,rows):
  for c in range (cent,cols):
    temp = image [r-cent : r + cent +1,c - cent: c + cent +1]
    if np.array_equal (temp,se): #in-built function which checks if the two given matrices are of equal size or not
      image_erosion [r][c]= 255 # here, in the place of 255, we always substitute the size of the structuring element
    else:
      image_erosion [r][c]=0 # squares of size < 11 x 11 are removed/made black 

image_dilation_erosion = image_erosion.copy()

#for loop to dilate the given image on the basis of certain criterion
#in dilation. if even one point of the structuring element is same as the original image, it will be a part of the dilated image
for r in range (cent,rows):
  for c in range (cent,cols):
    temp = image_erosion [r-cent : r + cent +1,c - cent: c + cent +1]
    if np.isin (255, temp): #checks if the value of the structuring element lies between the range of 255 and temp
      image_dilation_erosion [r][c]= 255 # here, in the place of 255, we always substitute the size of the structuring element
    else:
      image_dilation_erosion [r][c]=0 # squares of size < 11 x 11 are removed/made black 

plt.figure(figsize=(9,9))
plt.subplot(1,3,1)
plt.title ("Original Image")
plt.imshow (image, cmap= 'gray')
plt.subplot(1,3,2)
plt.title("Eroded Image")
plt.imshow (image_erosion, cmap= 'gray')
plt.subplot(1,3,3)
plt.title("Dilated Eroded Image")
plt.imshow (image_dilation_erosion, cmap = 'gray')

**Conclusion:**
* The eroded image is dilated  by using structuring element of the same size. 
* Erosion operation gets rid of all the squares which are smaller than the structuring element and the dilation operation regains the size of eroded squares. 
* This is called Opening operation. 
